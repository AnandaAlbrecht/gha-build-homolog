name: Build homolog

on:
  issues:
    types: opened

concurrency:
  group: build-homolog

jobs:
  setup:
    if: contains(github.event.issue.labels.*.name, 'build-homolog')
    name: Setup
    outputs:
      branches: ${{ steps.branches.outputs.values }}
    runs-on: ubuntu-latest
    steps:
      - name: Get action link
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            Action link [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Checkout do repositório
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Obtém a branch a ser mergeada
        id: branches
        run: |
          values=`python3 .github/support/deploy-homolog.py "parse-branches" "${{ github.event.issue.body }}"`
          echo $values
          echo "values<<EOF" >> $GITHUB_OUTPUT
          echo "$values" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  merge-branch:
    if: contains(github.event.issue.labels.*.name, 'build-homolog')
    name: Build Homolog
    needs: [ setup ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Atualizar branch homolog
        run: |
          git config --global user.email "robot@github.com"
          git config --global user.name "Homolog Robot"
          git fetch --all
          git checkout homolog
          lista_branches=''
          if [[ -f homolog-branches ]]; then
            lista_branches=$(cat homolog-branches)
          fi;          
          lista_branches=`echo -e "$lista_branches\n${{ needs.setup.outputs.branches }}" | tr ' ' '\n' | sort -u`                              
          git checkout develop
          git branch -D homolog
          git checkout -b homolog develop
          nova_lista=$lista_branches
          echo "DEBUG: Entrando no loop"
          while read -r branch; do
            set +e
            echo "DEBUG: Verifica se $branch existe"
            git ls-remote --exit-code --heads origin $branch &> /dev/null
            branch_exists=$?
            echo "DEBUG: Verificou se $branch $branch_exists"
            branch_merged=0
            if [ $branch_exists -eq 0 ]; then
              git checkout $branch
              git log --pretty=format:"%h" develop | grep `git log --pretty=format:"%h" -1 $branch` &> /dev/null
              branch_merged=$?
            fi
            if [ $branch_exists -eq 0 ] && [ $branch_merged -ne 0 ]; then
              set -e
              git rebase develop
              git checkout homolog
              git merge $branch --no-edit
            else
              set -e
              nova_lista="${nova_lista//$branch/}"
            fi
          done <<< "$lista_branches"
          echo "Preparando homolog"
          git checkout homolog
          echo $nova_lista | tr ' ' '\n' > homolog-branches
          echo "Atualizando lista"
          git add .
          git commit -m "Atualizando homolog com $nova_lista"
          git push --force origin homolog

  close-issue-with-success:
    if: success() && !cancelled()
    name: Close Issue
    needs: [ merge-branch ]
    runs-on: ubuntu-latest
    steps:
      
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Print environment variables
        run: |
          echo "CI_REPOSITORY_SLUG=$CI_REPOSITORY_SLUG"
          echo "CI_REPOSITORY_OWNER=$CI_REPOSITORY_OWNER"
          echo "CI_REPOSITORY_OWNER_SLUG=$CI_REPOSITORY_OWNER_SLUG"
          echo "CI_REPOSITORY_NAME=$CI_REPOSITORY_NAME"
          echo "CI_REPOSITORY_NAME_SLUG=$CI_REPOSITORY_NAME_SLUG"
          echo "CI_REPOSITORY=$CI_REPOSITORY"
          echo "CI_REF_SLUG=$CI_REF_SLUG"
          echo "CI_ACTION_REF_NAME=$CI_ACTION_REF_NAME"
          echo "CI_ACTION_REF_NAME_SLUG=$CI_ACTION_REF_NAME_SLUG"
          echo "CI_REF_NAME=$CI_REF_NAME"
          echo "CI_REF_NAME_SLUG=$CI_REF_NAME_SLUG"
          echo "CI_REF=$CI_REF"
          echo "CI_HEAD_REF_SLUG=$CI_HEAD_REF_SLUG"
          echo "CI_HEAD_REF=$CI_HEAD_REF"
          echo "CI_BASE_REF_SLUG=$CI_BASE_REF_SLUG"
          echo "CI_BASE_REF=$CI_BASE_REF"
          echo "CI_SHA_SHORT=$CI_SHA_SHORT"
          echo "CI_SHA=$CI_SHA"
          echo "CI_PR_SHA_SHORT=$CI_PR_SHA_SHORT"
          echo "CI_PR_SHA=$CI_PR_SHA"
          echo "CI_PR_NUMBER=$CI_PR_NUMBER"
          echo "CI_PR_ID=$CI_PR_ID"
          echo "CI_PR_TITLE=$CI_PR_TITLE"
          echo "CI_PR_DESCRIPTION=$CI_PR_DESCRIPTION"
          echo "CI_ACTOR=$CI_ACTOR"
          echo "CI_EVENT_NAME=$CI_EVENT_NAME"
          echo "CI_RUN_ID=$CI_RUN_ID"
          echo "CI_RUN_NUMBER=$CI_RUN_NUMBER"
          echo "CI_WORKFLOW=$CI_WORKFLOW"
          echo "CI_ACTION=$CI_ACTION"

      - name: Close issue with success
        uses: peter-evans/close-issue@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          comment: |
            ## Finish :rocket:
            Branches updated: ${{ steps.branches.outputs.values }}
            Automation completed.

  close-issue-with-error:
    if: failure() && !cancelled()
    name: Close Issue
    needs: [ merge-branch ]
    runs-on: ubuntu-latest
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Print environment variables
        run: |
          echo "CI_RUN_ID=$CI_RUN_ID"
          gh run view ${{ github.run_id }} --log | grep error
      - name: Close issue with failure
        uses: peter-evans/close-issue@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          comment: |
            ## Error :sob:
            Automation failed.
            You can view the error accessing the [action log](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            